snippet cont "Angular container" b
import { Component, Inject } from '@angular/core';

import { ${1:ComponentName} } from '../../components/${2:component-name}';
const template = require('./$2.ng2.html');

@Component({
	selector: 'mc-$2-container',
	template,
	directives: [
		$1,
	],
})
export class $1Container {
	private unsubscribe: Function;

	constructor(
		@Inject('connect') private connect
	) {}

	mapStateToProps(state: IAppState) {
		return {};
	}

	mapDispatchToProps(dispatch) {
		return {};
	}

	ngOnInit() {
		this.unsubscribe = this.connect(
			this.mapStateToProps.bind(this),
			this.mapDispatchToProps.bind(this)
		)(this);
	}

	ngOnDestroy() {
		this.unsubscribe();
	}
}
endsnippet

snippet red "Angular reducer" b
import { combineReducers } from 'redux';

import {
} from '../actions/types';

const ${1:reducerName} = (state = {}, action) => {
	return state;
};

export const ${2:filename} = combineReducers({
	$1,
});
endsnippet

snippet tsld "tslint:disable" b
// tslint:disable:${1:rule}
// tslint:enable:$1
endsnippet

snippet tsldv "tslint:disable:no-unused-variable" b
// tslint:disable:no-unused-variable
// tslint:enable:no-unused-variable
endsnippet

snippet svc "Angular service" b
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

import { Api } from '../../base/services/api';

@Injectable()
export class ${1:ServiceName}Service {
	constructor(private api: Api) {}
}
endsnippet

snippet act "Angular action" b
import { Injectable } from '@angular/core';

import {
} from './types';

@Injectable()
export class ${1:ActionName}Actions {
}
endsnippet

snippet comp "Angular component" b
import { Component } from '@angular/core';

const template = require('./${1:template}.ng2.html');

@Component({
	selector: 'mc-$1',
	template,
})
export class ${2:ComponentName} {
}
endsnippet
