snippet cont "Angular container" b
import { Component, Inject } from '@angular/core';

import { ${1:ComponentName} } from '../../components/${2:component-name}';
const template = require('./$2.ng2.html');

@Component({
	selector: 'mc-$2-container',
	template,
	directives: [
		$1,
	],
})
export class $1Container {
	private unsubscribe: Function;

	constructor(
		@Inject('connect') private connect
	) {}

	mapStateToProps(state: IAppState) {
	}

	mapDispatchToProps(dispatch) {
	}

	ngOnInit() {
		this.unsubscribe = this.connect(
			this.mapStateToProps.bind(this),
			this.mapDispatchToProps.bind(this)
		)(this);
	}

	ngOnDestroy() {
		this.unsubscribe();
	}
}
endsnippet

snippet red "Angular reducer" b
import { combineReducers } from 'redux';

import {
} from '../actions/types';

const ${1:reducerName} = (state = {}, action) => {
	return state;
};

export const ${2:filename} = combineReducers({
	$1,
});
endsnippet

snippet tsld "tslint:disable-next-line" b
// tslint:disable-next-line:${1:rule}
endsnippet

snippet tsldv "tslint:disable-next-line:no-unused-variable" b
// tslint:disable-next-line:no-unused-variable
endsnippet

snippet svc "Angular service" b
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

import { Api } from '../../base/services/api';

@Injectable()
export class ${1:ServiceName}Service {
	constructor(private api: Api) {}
}
endsnippet

snippet svcspec "Angular service spec" b
import { provide, Injector } from '@angular/core';

import {
	inject,
	beforeEach,
	beforeEachProviders,
} from '@angular/core/testing';

import { Api } from '../../base/services/api';
import { getRequestEndpoint, getRequestParams } from '../../base/spec-helpers';
import { ${1:ServiceName}Service } from './${2:filename}';

import { Observable } from 'rxjs';

describe('$1Service', () => {
	let api;
	let service: $1Service;

	beforeEachProviders(() => [
			provide(Api, {
				useFactory: () => ({
					get: jasmine.createSpy('http:get'),
					post: jasmine.createSpy('http:post'),
					put: jasmine.createSpy('http:put'),
				}),
			}),
			$1Service,
		]
	);

	beforeEach(inject([Injector], injector => {
		api = injector.get(Api);
		service = injector.get($1Service);
	}));

	describe('${3:methodName}', () => {
		beforeEach(() => {
			api.get.and.returnValue(Observable.of({
				json: () => 'result',
			}));
		});

		it('hits the correct endpoint', () => {
			service.$3();
			const endpoint = getRequestEndpoint(api, 'get');

			expect(endpoint).toEqual('${4:endpoint}');
		});
	});
});
endsnippet

snippet act "Angular action" b
import { Injectable } from '@angular/core';

import {
} from './types';

@Injectable()
export class ${1:ActionName}Actions {
}
endsnippet

snippet comp "Angular component" b
import { Component, EventEmitter, Input, Output } from '@angular/core';

const template = require('./${1:template}.ng2.html');

@Component({
	selector: 'mc-$1',
	template,
})
export class ${2:ComponentName} {
}
endsnippet

snippet desc "describe" b
describe('${1:feature}', () => {
	${2:...}
});
endsnippet

snippet it "'it' example" b
it('${1:does something}', () => {
	${2:...}
});
endsnippet
