snippet cont "Angular container" b
import { Component, Inject } from '@angular/core';

const template = require('./${1:template-name}.ng2.html');

@Component({
	selector: 'mc-$1-container',
	template,
})
export class ${2:ContainerName}Container {
	private unsubscribe: Function;

	constructor(
		@Inject('connect') private connect
	) {}

	mapStateToProps(state: IAppState) {
	}

	mapDispatchToProps(dispatch) {
	}

	ngOnInit() {
		this.unsubscribe = this.connect(
			this.mapStateToProps.bind(this),
			this.mapDispatchToProps.bind(this)
		)(this);
	}

	ngOnDestroy() {
		this.unsubscribe();
	}
}
endsnippet

snippet red "Angular reducer" b
import { combineReducers } from 'redux';

import * as types from '../actions/types';

const ${1:reducerName} = (state = {}, action) => {
	return state;
};

export const ${2:filename} = combineReducers({
	$1,
});
endsnippet

snippet tsld "tslint:disable-line"
// tslint:disable-line:${1:rule}
endsnippet

snippet tsldn "tslint:disable-next-line" b
// tslint:disable-next-line:${1:rule}
endsnippet

snippet tsldv "tslint:disable-line:no-unused-variable"
// tslint:disable-line:no-unused-variable
endsnippet

snippet tsldnv "tslint:disable-next-line:no-unused-variable" b
// tslint:disable-next-line:no-unused-variable
endsnippet

snippet svc "Angular service" b
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

import { Api } from '../../base/services/api';

@Injectable()
export class ${1:ServiceName}Service {
	constructor(private api: Api) {}
}
endsnippet

snippet svcspec "Angular service spec" b
import { Observable } from 'rxjs/Observable';

import { Api } from '../../base/services/api.mock';
import {
	getRequestEndpoint,
	getRequestParams,
	getRequestSearch,
	mockRequest,
} from '../../base/spec-helpers';
import { ${1:ServiceName}Service } from './${2:filename}';

describe('$1Service', () => {
	let api;
	let service: $1Service;

	beforeEach(() => {
		api = new Api();
		service = new $1Service(api);
	});

	describe('${3:methodName}', () => {
		beforeEach(() => mockRequest(api.get));

		it('hits the correct endpoint', () => {
			service.$3();

			expect(getRequestEndpoint(api, 'get')).toEqual('${4:endpoint}');
		});
	});
});
endsnippet

snippet act "Angular action" b
import { Injectable } from '@angular/core';

import * as types from './types';

@Injectable()
export class ${1:ActionName}Actions {
}
endsnippet

snippet comp "Angular component" b
import { Component, EventEmitter, Input, Output } from '@angular/core';

const template = require('./${1:template}.ng2.html');

@Component({
	selector: 'mc-$1',
	template,
})
export class ${2:ComponentName} {
}
endsnippet

snippet desc "describe" b
describe('${1:feature}', () => {
});
endsnippet

snippet it "'it' example" b
it('${1:does something}', () => {
});
endsnippet

snippet injt "inject translate"
@Inject(Translator) @translates('${1:root key}') private t: ITranslator
endsnippet
